name: joss-pdf-build

on:
  push:
    paths:
    - paper/**
    - .github/workflows/joss-pdf-build.yml

jobs:
  paper-build:
    runs-on: ubuntu-latest
    name: JOSS-paper-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build draft PDF
        uses: openjournals/openjournals-draft-action@master
        with:
          journal: joss
          # This should be the path to the paper within your repo.
          paper-path: paper/paper.md
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: paper
          # This is the output path where Pandoc will write the compiled
          # PDF. Note, this should be the same directory as the input
          # paper.md
          path: paper/paper.pdf


  # FIXME: the PR is opened against the main branch
  paper-add-to-repo:
    runs-on: ubuntu-latest
    name: add-pdf-to-repo
    needs: paper-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: If exists the paper file paper/paper.pdf, remove it
        run: |
          if [ -f paper/paper.pdf ]; then
            rm paper/paper.pdf
          else
            echo "File paper/paper.pdf does not exist."
          fi
        shell: bash

      - name: Download
        uses: actions/download-artifact@v4
        with:
          name: paper
          path: paper

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Delete branch remotely joss-pdf-ac-branch (if exists)
        run: |
          git fetch --prune
          if git branch -r | grep -q 'origin/joss-pdf-ac-branch'; then
            git push origin --delete joss-pdf-ac-branch
          else
            echo "Branch joss-pdf-ac-branch does not exist."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Get current branch name
        run: |
          current_branch=$(git branch --show-current)
          echo "Current branch: $current_branch"
        shell: bash

      - name: Create new branch and commit pdf addtion/replacement
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git checkout -b joss-pdf-ac-branch
          git add paper/paper.pdf
          git commit -m "ACTION_BOT: AC JOSS paper draft PDF"
          git push --set-upstream origin joss-pdf-ac-branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close existing pull requests for joss-pdf-ac-branch
        run: |
          gh pr list --state open --head joss-pdf-ac-branch --json number --jq '.[].number' | xargs -I {} gh pr close {}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Create pull request
        run: |
          gh pr create --title "ACTION_BOT: AC JOSS paper draft PDF" --body "AC JOSS paper draft PDF" --base $current_branch --head joss-pdf-ac-branch --label ACTION_BOT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge pull request
        run: |
          pr=$(gh pr list --head joss-pdf-ac-branch --json number --jq '.[0].number')
          gh pr merge $pr --squash --delete-branch --admin  --strategy-option ours
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_PAT_TOKEN }}
        shell: bash